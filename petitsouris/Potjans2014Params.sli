%%% PARAMETER SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define all relevant parameters: changes should be made here
% all data is placed in the userdict dictionary

/scale 0.2 def %  scaling factor of the network size, total network size = scale*11250 neurons
/Tsim 1. def % total simulation time in ms

% -------------------------------------------------------------------------------------

0 << /local_num_threads 8 >> SetStatus

/g -1 def

/JE 1500.0 pA def
/JI g JE mul  def 

%/subnet Create
%1 ChangeSubnet
%/aeif_cond_exp 100 Create

%0 ChangeSubnet

%/aeif_cond_exp 74999900 Create

%/tsodyks2_synapse /syn_ex << /weight JE >> CopyModel
%/tsodyks2_synapse /syn_in << /weight JI >> CopyModel

/subnet_name (subnet0) def
/neuronmodel_name /aeif_cond_exp def
/neuronparam_names [(C_m) (Delta_T) (E_L) (E_ex) (E_in) (V_peak) (V_reset) (V_th) (a) (b)] def
/cell_pos_file (/gpfs/bbp.cscs.ch/scratch/gss/bgq/schumann/ptneu_brain_113935285.h5) def
subnet_name neuronparam_names neuronmodel_name cell_pos_file H5NeuronCsX_s_a_s


/neuron_offset 2 def
/synmodel_name /tsodyks2_synapse def
/synparam_names [(delay) (weight) (U0) (TauRec) (TauFac)] def
/connection_dir (/gpfs/bbp.cscs.ch/scratch/gss/bgq/schumann/syn_exp1_o.h5) def

neuron_offset synparam_names synmodel_name connection_dir HDF5MikeLoad_s_s


/offset 2 def

%1 1 100 <<
%	  /E_L 		-65.0 mV
%	  /V_reset 	-65.0 mV
%	  /C_m		 250 pF	
%	  /tau_m	 10.0 ms
%	  %/t_ref_abs 	 2.0
%	  /tau_syn_ex 	 0.5 ms
%	  /tau_syn_in 	 0.5 ms
%	  /V_th 	-50.0 mV
%	  /I_e 		 0.0 pA
%   >> SetStatus 


%(Connect Poisson Generator.. 1 1 12463320) =
%Rank 0 eq { NumProcesses NumProcesses 12463320 { ex_pop dup epsc d Connect } for } { Rank NumProcesses 12463320 { ex_pop dup epsc d Connect } for } ifelse
%(Connect Poisson Generator.. done) =

%1668 << /I_e 3760.0 >> SetStatus
%1848 << /I_e 3760.0 >> SetStatus
%1849 << /I_e 3760.0 >> SetStatus

%1 1 12463320 { dup << /I_e 376.0 >> SetStatus } for
%Rank offset leq
%{
%  NumProcesses Rank add NumProcesses 9 
%  {
%    dup << /I_e 1500.0 pA >> SetStatus
%  } for
%}
%{
%  Rank NumProcesses 9
%  {
%    dup << /I_e 1500.0 pA >> SetStatus 
%  } for
%} ifelse

1 GetLocalChildren { 
    dup << /I_e 2500.0 pA >> SetStatus
} forall

%10 Rank add NumProcesses 100 { dup << /I_e 375.0 >> SetStatus } for


0 
<<
	/data_path (/gpfs/bbp.cscs.ch/home/schumann/nestio/models/petitsouris/nest_output)
	/overwrite_files true
>> SetStatus

(Rank_) Rank cvs join (: Create SpikeDetectors..) join =


/spike_detector << /to_file true /to_memory false /to_screen false /withgid true >>    Create /ownspikes Set
%/multimeter << /to_file true /to_memory false /to_screen false /withgid true /record_from [/V_m] >>  Create /vm Set

(Rank_) Rank cvs join (: Create SpikeDetectors.. done) join =

%(Connect SpikeDetectors..) =
%NumProcesses Rank add NumProcesses 3500 mul 71000000 { dup ownspikes Connect } for 
%(Connect SpikeDetectors.. done) =

%(Connect SpikeDetectors..) =
%NumProcesses Rank add ownspikes Connect 
%(Connect SpikeDetectors.. done) =


%1 205 70900000 { dup ownspikes Connect } for

(Rank_) Rank cvs join (: Connect spikedetector..) join =

%Rank 0 eq { NumProcesses DP 71000000 { dup ownspikes Connect } for } { Rank DP 71000000 { dup ownspikes Connect  } for } ifelse



/DP NumProcesses 10 mul def
Rank offset leq
{
  NumProcesses Rank add DP 74107932 
  {
    dup /n Set
    n GetStatus /local get not
    {
      (ERROR neuron ) n cvs join (not on rank ) join Rank cvs join =
    } if
    %(Rank_) Rank cvs join (: Neuron ) join n cvs join ( connected to Spikedetector) join =
    n ownspikes Connect
  } for
}
{
  Rank DP 74107932
  {
    dup /n Set
    n GetStatus /local get not
    {
      (ERROR neuron ) n cvs join (not on rank ) join Rank cvs join =
    } if
    %(Rank_) Rank cvs join (: Neuron) join n cvs join ( connected to Spikedetector) join =
    n ownspikes Connect
  } for
} ifelse

(Rank_) Rank cvs join (: Connect spikedetector.. done) join =




%(Rank_) Rank cvs join (: write status to file..) join =

%(GetStatus_) Rank cvs join (.out) join (w) file /f Set
%1 1 NumProcesses 10 mul { dup /n Set f (Rank_) Rank cvs join (;) join n cvs join (;I_e;) join n GetStatus /I_e get cvs join <- f endl } for
%f ;

%(Rank_) Rank cvs join (: write status to file.. done) join =


0 ShowStatus

%/simtime Tsim ms        % simulated time
1000 Simulate
(Rank_) Rank cvs join (: 0 Simulation done) join =
